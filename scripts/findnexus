#!/usr/bin/env python3
from zeroconf import *
import socket
import time
import sys
import argparse
import re
from texttable import Texttable
from collections import OrderedDict
import json

nexus_list = []
app = "findnexus"
if sys.platform == "win32":
    app = "{}.exe".format(app)


def convert(data):
    if isinstance(data, bytes):
        return data.decode()
    if isinstance(data, dict):
        return dict(map(convert, data.items()))
    if isinstance(data, tuple):
        return map(convert, data)
    return data


def checkMAC(x):
    if re.match("[0-9a-f]{2}([-:])[0-9a-f]{2}(\\1[0-9a-f]{2}){4}$", x.lower()):
        return 0
    else:
        return 1

class NexusListener(object):
    def __init__(self, wait_t=1):
        self.wait_t = wait_t
        self.nexus_found= dict()

    def remove_service(self, zeroconf, type, name):
        pass

    def add_service(self, zeroconf, type, name):
        nexus_dict = {}
        info = zeroconf.get_service_info(type, name, timeout=self.wait_t*1000)
        if info:
            # Currently only saving the ip address.
            nexus_dict['addr'] = socket.inet_ntoa(info.address)
            nexus_dict['port'] = str(info.port)
            prop = info.properties
            if prop:
                prop = convert(prop)
                nexus_dict['prop'] = prop
                self.nexus_found[nexus_dict['prop']['mac']] = nexus_dict


def search_nexus_services(wait_t, mac=None):
    nexus_found = {}
    r = Zeroconf()
    type = "_nexus._tcp.local."
    listener = NexusListener(wait_t)
    browser = ServiceBrowser(r, type, listener)

    if mac:
        while wait_t > 0:
            time.sleep(1)
            if mac in listener.nexus_found:
                return listener.nexus_found[mac]
            wait_t -= 1
        raise TimeoutError("MAC not found")
    else:
        time.sleep(wait_t)
        r.close()
        return listener.nexus_found

if __name__ == "__main__":
    wait_t = 5
    mac2ip = ""
    parser = argparse.ArgumentParser()
    parser.add_argument("-m", help="find with specify mac address.")
    parser.add_argument("-j", action='store_true', help="return json format table")
    parser.add_argument("-t", type=int, help="discovery time in seconds, default is 1 seconds.")
    args = parser.parse_args()
    if (args.t):
        wait_t = args.t 
        #print("get seconds {}".format(wait_t))
    if (args.m):
        if checkMAC(args.m):
            print("Wrong Format MAC Address")
            exit(1)
        try:
            mac2ip = search_nexus_services(wait_t, args.m.lower())
        except:
            exit(1)

    if args.m:
        if mac2ip:
            print("{}".format(mac2ip['addr']))
    else:
        nexus_list = search_nexus_services(wait_t)
        table = Texttable()
        json_ret = OrderedDict()
        table.set_cols_align(["c", "c", "c", "c"])
        #table.set_cols_valign(["t", "m", "b"])
        table.add_row(["IP Address", "MAC", "hostname", "Model"])
        for mac, found in nexus_list.items():
            props = found['prop']
            table.add_row([found['addr'], props['mac'], props['hostname'], props['model']])
            json_ret[props['mac']] = {"addr": found['addr'], "hostname": props['hostname'], "model": props['model']}
        if args.j:
            print(json.dumps(json_ret, indent=2))
        else:
            print(table.draw() + "\n")

